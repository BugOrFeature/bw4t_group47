use robot as knowledge.

module robotEvents {
	% Update the agent's state of movement.
	forall bel( state(State)), percept(state(NewState))  
		do delete( state(State) ) + insert( state(NewState) ).
	
	% Record when we are entering or leaving a room.
	forall percept(in(Place)) do insert( in(Place) ).
	forall percept(not(in(Place))) do delete( in(Place) ).

	% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.
	forall percept(atBlock(Block)) do insert(atBlock(Block)).
	forall percept(not(atBlock(Block))) do delete(atBlock(Block)).
	
	forall percept(at(Place)) do insert(at(Place)).
	forall percept(not(atPlace(Place))) do delete(at(Place)).
	
	forall percept(holding(Block)) do insert(holding(Block)).
	forall percept(not(holding(Block))) do delete(holding(Block)).
	
	if percept(sequenceIndex(Index)) then insert(sequenceIndex(Index)).
	if percept(not(sequenceIndex(Index))) then delete(sequenceIndex(Index)).
	% Exercise 2.5b: insert code for goal management that allows an agent to systematically search for blocks. (if needed)
	
	% Exercise 2.6b: insert code for goal management that makes the agent deliver a block when it 
	%   knows about a block that can be delivered. (if needed)
}
