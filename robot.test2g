use bw4t.
use robot as knowledge.
use robot as module.
timeout = 300.

test main with
	pre { true }
	in {		
		
		% after all rooms are searched search for block.
			%G1 test
			not(a-goal(in(Place))), bel(nextColorInSeq(Color)),bel(not(holding(_))), bel(block(Block,Place)), bel(color(Block, Color)) leadsto goal(in(Place)).
			%G2 test
			goal(holding(Block)) leadsto not(goal(in(Place))).
			%G3 test
			%never goal(in(Place)), bel(holding(Block)), goal(in(Place)).
			%G4 test
			%never not(goal(in(Place))), not(a-goal(in(Place))), bel(nextColorInSeq(Color)),bel(not(holding(_))), bel(block(Block,Place)), bel(color(Block, Color)).
			
		%action tests
		%sc leadsto done(action)
		%never(done(action))
		
			%putdown block test
			bel(in('DropZone')), bel(holding(Block)) leadsto done(putDown).
			never done(putDown), not(percept(at('DropZone'))).
			
			%gotoblock test
			goal(holding(Block)), bel(block(Block,Room)), bel(not(atBlock(Block))), bel(not(holding(_))) leadsto done(goToBlock(Block)).
			never done(goToBlock(Block)), not(percept(color(Block,Color))).
			
			%pickup block test
			goal(holding(Block)), bel(atBlock(Block)), bel(not(holding(_))) leadsto done(pickUp(Block)).
			%never done(pickUp(Block)), not(goal(holding(Block))).
			
			%goto dropzone test
			goal( in('DropZone')) leadsto done(goTo('DropZone')).
			never done(goTo('DropZone')), not(goal(in('DropZone'))).
			
			%goto place test
			%goal( in(Place) ) leadsto done(goTo(Place)).
			%never done(goTo(Place)), not(goal(in(Place))).
				
		% Assignment 3.1: insert test conditions for the mandatory requirements.
		% An agent should not drop a block outside a room (i.e. in a corridor)
		never done(putDown), bel(not(in(_))).
		% An agent should not pick up a block that is not of the next needed color
		never done(pickUp(Block)), bel(not(nextColorInSeq(Color))), bel(color(Block, Color)).
		% An agent that is holding a block that is not of the next needed color should not enter the drop zone
		never bel(holding(Block)), bel(not(nextColorInSeq(Color))), bel(color(Block, Color)), bel(in('DropZone')).
		% An agent should not leave the drop zone whilst holding a block
		bel(in('DropZone')) leadsto bel(not(holding(_))).
		% Assignment 3.2: insert any additional conditions for further requirements.
		%An agent should not leave a room it has already visited (and is not the dropzone) without holding a block;ka
		
	}
	post { true }
	
test robotInit with
	pre { true }
	in {
		%perception tests
		percept(zone(ID, Name, X, Y, Neighbours)) leadsto bel(zone(ID, Name, X, Y, Neighbours)).
		percept(sequenceIndex(N)) leadsto bel((sequenceIndex(N))).
		percept(state(State)) leadsto bel(state(State)).
		percept(color(Block, Color)) leadsto bel(color(Block, Color)).
		percept(place(Place)) leadsto bel(place(Place)).
		percept(sequence(Sequence)) leadsto bel(sequence(Sequence)).
		percept(at(Place)) leadsto bel(at(Place)).
		% test initial in(Place) goals
		bel( room(Place) ) leadsto goal(in(Place)).
		bel(in(Place)) leadsto not(goal(in(Place))).
		never goal(in(Place)), bel(in(Place)).
		% never not(goal(in(Place))), bel(not(in(Place))).
	}
	post { true }
	
	
test robotEvents with
	pre { true }
	in {
		%goal tests
		% holding block test
		%G1 test
		bel(holding(Block)), percept(at('Dropzone')) leadsto not(goal(holding(Block))).
		%G2 test
		never goal(holding(Block)), bel(holding(Block)).
				
		%perception tests
		percept(in(Room)) leadsto bel( in(Room) ).
		percept(in(Room)) leadsto bel(visited(Room)).
		percept(atBlock(Block)) leadsto bel(atBlock(Block)).
		bel(in(Room)), percept(color(Block, _)) leadsto bel(block(Block,Room)).
		percept(holding(Block)) leadsto bel(holding(Block)).
		percept(color(Block, Color)) leadsto bel(color(Block, Color)).
	}
	post { true }
	
robot {
	do main. 
}
