use robot as knowledge.
use robot as actionspec.
exit=nogoals.

module main {
	% Exercise 2.5a: insert code for action rules that allows an agent to systematically search for blocks.
	
	% Exercise 2.6a: insert code for action rules that makes the agent deliver a block when it 
	%   knows about a block that can be delivered.
	
	%if the robot is in the dropzone and holding a block then put it down.
	if bel(in('DropZone')), bel(holding(Block)) then putDown.
	%if the bot has visited all rooms go to the room containing the block required in the sequence.
	if not(a-goal(in(Place))), bel(hasNewColor), bel(nextColorInSeq(Color)),bel(not(holding(_))), bel(block(Block,Place)), bel(color(Block, Color)) then adopt(in(Place)).
	%if the bot wants to hold a specific block then goto that block.
	if a-goal(holding(Block)), bel(hasNewColor), bel(block(Block,Room)), bel(not(atBlock(Block))), bel(not(holding(_))) then goToBlock(Block).
	% if the bot wants to hold a block and is at that block then pick it up.
	if a-goal(holding(Block)), bel(hasNewColor), bel(atBlock(Block)), bel(not(holding(_))) then pickUp(Block).
	% if the bot has a goal to goto the dropzone then goto the drop zone
	if a-goal( in('DropZone')) then goTo('DropZone').
	% if the bot wants to do to a place then go to that place.
	if a-goal( in(Place) ) then goTo(Place).
	% if there is not a new color in the sequence to reach, the agent should terminate.
	if a-goal(in(Place)), bel(not(hasNewColor)) then drop(in(Place)).
	if a-goal(holding(Block)), bel(not(hasNewColor)) then drop(holding(Block)).
	
	% Exercise 1.2: 
	% if the bot wants to pickup a block that is no longer in the specified room, drop the goal to pickup that block.
	if a-goal(holding(Block)), bel(block(Block, Room)), percept(not(block(Block, Room))) then drop(holding(Block)). 
}
